openapi: 3.1.0
info:
  title: AI Content Platform API
  version: 1.0.0
  description: |
    API تعریف‌شده برای MVP پلتفرم تولید محتوای هوش مصنوعی. این مستند شامل endpointهای اصلی برای احراز هویت، مدیریت کاربران، پروژه‌ها، درخواست‌های محتوا، تولید متن، بهینه‌سازی و انتشار است.
servers:
  - url: http://localhost:3000/api
    description: Local development

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        fullName:
          type: string
        status:
          type: string
          enum: [PENDING, ACTIVE, SUSPENDED, DELETED]
        createdAt:
          type: string
          format: date-time
      required: [id, email, status, createdAt]
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [OPEN, COMPLETED, ARCHIVED]
        deadline:
          type: string
          format: date-time
      required: [id, title, status]
    ContentRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        title:
          type: string
        persona:
          type: string
        tone:
          type: string
        language:
          type: string
        lengthType:
          type: string
          enum: [SHORT, MEDIUM, LONG]
        status:
          type: string
          enum: [PENDING, GENERATING, SEO, READY_FOR_PUBLISH, PUBLISHED, ERROR]
        dueDate:
          type: string
          format: date-time
      required: [id, title, language, lengthType, status]
  parameters:
    ProjectIdParam:
      name: projectId
      in: path
      description: شناسه پروژه
      required: true
      schema:
        type: string
        format: uuid
    RequestIdParam:
      name: requestId
      in: path
      description: شناسه درخواست محتوا
      required: true
      schema:
        type: string
        format: uuid

security:
  - bearerAuth: []

paths:
  /auth/signup:
    post:
      summary: ایجاد حساب کاربری
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                fullName: { type: string }
              required: [email, password]
      responses:
        '201':
          description: حساب ایجاد شد
        '400':
          description: خطای اعتبارسنجی

  /auth/login:
    post:
      summary: ورود و دریافت توکن
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
              required: [email, password]
      responses:
        '200':
          description: ورود موفق
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }
        '401':
          description: احراز هویت ناموفق

  /projects:
    get:
      summary: دریافت لیست پروژه‌ها
      responses:
        '200':
          description: لیست پروژه‌ها
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: ایجاد پروژه جدید
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                deadline: { type: string, format: date-time }
              required: [title]
      responses:
        '201':
          description: پروژه ایجاد شد
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{projectId}:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    get:
      summary: دریافت اطلاعات یک پروژه
      responses:
        '200':
          description: جزئیات پروژه
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: پروژه پیدا نشد
    patch:
      summary: بروزرسانی پروژه
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                status: { type: string, enum: [OPEN, COMPLETED, ARCHIVED] }
                deadline: { type: string, format: date-time }
      responses:
        '200':
          description: پروژه بروزرسانی شد
    delete:
      summary: حذف پروژه
      responses:
        '204':
          description: حذف موفق

  /projects/{projectId}/requests:
    parameters:
      - $ref: '#/components/parameters/ProjectIdParam'
    get:
      summary: دریافت درخواست‌های مرتبط با یک پروژه
      responses:
        '200':
          description: لیست درخواست‌ها
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentRequest'
    post:
      summary: ایجاد درخواست محتوا در پروژه
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                persona: { type: string }
                tone: { type: string }
                language: { type: string }
                lengthType: { type: string, enum: [SHORT, MEDIUM, LONG] }
                dueDate: { type: string, format: date-time }
              required: [title, language, lengthType]
      responses:
        '201':
          description: درخواست ایجاد شد
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRequest'

  /requests/{requestId}:
    parameters:
      - $ref: '#/components/parameters/RequestIdParam'
    get:
      summary: دریافت جزئیات یک درخواست محتوا
      responses:
        '200':
          description: جزئیات درخواست
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRequest'
        '404':
          description: یافت نشد
    patch:
      summary: بروزرسانی درخواست محتوا
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [PENDING, GENERATING, SEO, READY_FOR_PUBLISH, PUBLISHED, ERROR] }
                assignedToId: { type: string }
                dueDate: { type: string, format: date-time }
      responses:
        '200':
          description: بروزرسانی انجام شد

  /requests/{requestId}/generate:
    post:
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      summary: آغاز تولید محتوا
      responses:
        '202':
          description: درخواست در صف قرار گرفت

  /requests/{requestId}/seo:
    get:
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      summary: دریافت داده‌های سئو
      responses:
        '200':
          description: داده سئو
    post:
      summary: ذخیره یا بروزرسانی داده سئو
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keywords: { type: array, items: { type: string } }
                metaTitle: { type: string }
                metaDescription: { type: string }
                readabilityScore: { type: number }
                schemaJson: { type: object }
      responses:
        '200':
          description: داده سئو ذخیره شد

  /requests/{requestId}/publish:
    post:
      parameters:
        - $ref: '#/components/parameters/RequestIdParam'
      summary: انتشار محتوا در CMS
      responses:
        '202':
          description: انتشار در حال انجام است

  /articles/{articleId}:
    get:
      summary: مشاهده مقاله منتشرشده
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: بدنه مقاله
          content:
            application/json:
              schema:
                type: object
                properties:
                  body: { type: string }
                  publishedUrl: { type: string }
        '404':
          description: پیدا نشد
